#!/usr/bin/python

from operator import xor
import binascii
import sys
import struct
from Crypto.Cipher import AES
from Crypto import Random
from fractions import gcd

def hextobytes(s):
    return binascii.unhexlify(s)

def bytestohex(b):
    return binascii.hexlify(b).decode("utf-8")

def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in range(0, len(l), n):
        yield l[i:i+n]

def xor_arr(a, b):
    res = [0] * len(a) 
    for i in range(len(a)):
        res[i] = xor(a[i], b[i])
    return res


def generate(x, base):
    res = [] 
    res.append(1)
    t = 1
    while True:
        t = (t * x) % base
        if t in res: break
        res.append(t)
    return list(res)

#Q11
#G = generate(7, 13)
#print(G)


#Q7
#cnt = 0
#for i in range(1, 35):
#    if gcd(i, 35) == 1:
#        cnt += 1
#        print(i)
#print("cnt:",cnt)

#Q10
#t = 1
#for i in range(20):
#    print(t)
#    t = (t * 2) % 35

#Q5
#for a in range(1, 100):
#    for b in range(-100, 100):
#        if 7 * a + 23 * b == 1:
#            print("a =", a, "b =", b)


#Q15
p = 31
for g in range(1, 32):
    l = generate(g, p)
    if len(l) == 30:
        print(g, l)
