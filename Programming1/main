#!/usr/bin/python

from operator import xor
import binascii
import sys

def hextostring(s):
    return binascii.unhexlify(s)

with open('data', 'r') as f:
    raw_data = f.readlines()

data = [hextostring(s[:-1]) for s in raw_data]
spaces = [[] for i in range(10)]
#spaces[0] = [3, 8, 85, 65, 20, 31, 35, 38, 53, 57, 63, 65, 69, 72, 78, 85, 89]
spaces[ 0 ] =  [3, 8, 20, 28, 38, 53, 57, 63, 65, 69, 72, 78, 85, 89]
spaces[ 1 ] =  [6, 13, 17, 24, 27, 51, 58, 70, 74, 91, 106, 111, 117, 123, 132]
spaces[ 2 ] =  [5, 11, 47, 55, 64, 73, 80, 96, 104]
spaces[ 3 ] =  [23, 44, 60, 68, 71, 114, 126, 133]
spaces[ 4 ] =  [7, 9, 46, 66, 90, 100]
spaces[ 5 ] =  [19, 22, 37, 48, 76, 88, 105, 116, 121, 129, 134, 139, 144, 154, 156, 157, 160, 163, 169]
spaces[ 6 ] =  [79, 98, 108, 112, 130, 141, 148, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185]
spaces[ 7 ] =  [61, 87, 120]
spaces[ 8 ] =  [1, 15, 16, 43, 62, 97, 107, 127, 143]
spaces[ 9 ] =  [0, 4, 12, 29, 45, 52, 59, 67, 75, 77]

info = [[] for i in range(10)]
info[0] = [(2, 'e'), (10, 'h'), (14, ' '), (18, 'u'), (39, 'c'), (40, 'r')]
info[1] = [(41, 'c'),(42, 'o'),(54, ' '),(56, 'a')]
info[2] = [(7, 'o'), (99, 'l'), (101, 'r'), (102, '\''), (103, 's'), (109, 'r'), (110, 'e'), (111, 'm')]
info[3] = [(113, 'n'), (115, 'a'), (118, 'o'), (119, 'r'), (122, 'h'), (135, 'i'),(136, 'm'),(137, 'm'),(138, 'e'),(140, 'm'),(142, 'n')]
info[4] = [(30, ' '),(31, 'c'),(32, 'a'),(33, 'r'),(34, ' '),(35, 'k'),(36, 'e'),(92, 'o'),(93, 't'),(94, 'e'),(95, 'n')]
info[5] = [(86, 'l'), (124, 'c'), (125, 'r'), (128, 's'), (131, 'a'),(151,'m'),(152,'e'),(153,'n'), (154, 't'), (155, ' '), (156, '-'), (157, ' ')]
info[6] = [(81, 'o'), (82, 'r'), (83, 'c'), (84, 'e'),(164,'b'),(165, 'r'),(166, 'e'),(167, 'a'),(168, 'k'),(170,'n'),(171,'g'),(158,'c'),(159,'e'),(160,' '),(161,'t'),(162, 'o')]
info[7] = []
info[8] = [(49, 'i'), (50, 't'),(145, 'e'),(146, 'c'),(147, 'r'),(149,'p'),(150,'t')]
info[9] = [(21, 'c'), (25, 'n'), (26, 'a')]

print(data[-2][0])

def decode_message(ind = 10):
    key = [-1] * 1024
    for ns in range(10):
        for pos in spaces[ns]:
            key[pos] = xor(data[ns][pos], 32) # 32 space
    
    for (i, inf) in enumerate(info):
        for (pos, ch) in inf:
            key[pos] = xor(ord(ch), data[i][pos])

    ct = data[ind]
    for (i, e) in enumerate(ct):
        if (key[i] == -1):
            sys.stdout.write('Â·')
        else:
            sys.stdout.write(chr(xor(key[i], e)))
    print()


for NS in range(10):
    poses = []
    for pos in range(len(data[NS])):
        #check if already predicted
        f = False
        for space in spaces:
            for t in space:
                if t == pos:
                    f = True
        if f: continue 

        c_base = data[NS]
        f = True
        for (i, ci) in enumerate(data):
            if (i == NS): continue
            if (pos >= len(ci)): continue
            m = xor(c_base[pos], ci[pos])
            if not (m == 0 or (m in range(97, 123)) or (m in range(65, 91))):
               f = False
        if f:
            poses.append(pos)

    print('spaces[', NS, '] = ', poses)

for i in range(11):
    decode_message(i)
