#!/usr/bin/python

from operator import xor
import binascii
import sys
import struct
from Crypto.Cipher import AES

def hextostring(s):
    return binascii.unhexlify(s)

def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in range(0, len(l), n):
        yield l[i:i+n]

def xor_arr(a, b):
    res = [0] * len(a) 
    for i in range(len(a)):
        res[i] = xor(a[i], b[i])
    return res

def decrypt_CBC(key, ct):
    key = hextostring(key)
    ct = hextostring(ct)
    blocks = list(chunks(ct, 16))
    aes = AES.new(key)
    t = blocks[0]
    res = []
    for i in range(1, len(blocks)):
        m = xor_arr(t, aes.decrypt(blocks[i]))
        t = blocks[i]
        for j in m:
            res.append(j)
    n = res[-1]
    res = res[:-n]
    b = "".join(map(chr, res))
    return b

def inc_bytes(a):
    o = bytearray(a)
    o.reverse()
    for i in range(len(o)):
        if o[i] == 255:
            o[i] = 0
        else:
            o[i] += 1
            break
    o.reverse()
    return bytes(o)
    pass

def decrypt_CTR(key, ct):
    key = hextostring(key)
    ct = hextostring(ct)
    blocks = list(chunks(ct, 16))
    IV = blocks[0]
    aes = AES.new(key)

    res = []
    for i in range(1, len(blocks)):
        m = xor_arr(blocks[i], aes.encrypt(IV))
        IV = inc_bytes(IV)
        for j in m:
            res.append(j)
    b = "".join(map(chr, res))
    return b

CBC = [
    ["140b41b22a29beb4061bda66b6747e14",
    "4ca00ff4c898d61e1edbf1800618fb2828a226d160dad07883d04e008a7897ee2e4b7465d5290d0c0e6c6822236e1daafb94ffe0c5da05d9476be028ad7c1d81"],
    ["140b41b22a29beb4061bda66b6747e14",
    "5b68629feb8606f9a6667670b75b38a5b4832d0f26e1ab7da33249de7d4afc48e713ac646ace36e872ad5fb8a512428a6e21364b0c374df45503473c5242a253"]
    ]

CTR = [
    ["36f18357be4dbd77f050515c73fcf9f2",
    "69dda8455c7dd4254bf353b773304eec0ec7702330098ce7f7520d1cbbb20fc388d1b0adb5054dbd7370849dbf0b88d393f252e764f1f5f7ad97ef79d59ce29f5f51eeca32eabedd9afa9329"],
    ["36f18357be4dbd77f050515c73fcf9f2",
    "770b80259ec33beb2561358a9f2dc617e46218c0a53cbeca695ae45faa8952aa0e311bde9d4e01726d3184c34451"]
    ]

ind = 1
print(decrypt_CTR(CTR[ind][0], CTR[ind][1]))
