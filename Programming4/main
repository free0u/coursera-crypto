#!/usr/bin/python

from operator import xor
import binascii
import sys
import struct
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def hextobytes(s):
    return binascii.unhexlify(s)

def bytestohex(b):
    return binascii.hexlify(b).decode("utf-8")

def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in range(0, len(l), n):
        yield l[i:i+n]

def xor_arr(a, b):
    res = [0] * len(a) 
    for i in range(len(a)):
        res[i] = xor(a[i], b[i])
    return res

def read_in_chunks(file_object, chunk_size=1024):
    """Lazy function (generator) to read a file piece by piece.
    Default chunk size: 1k."""
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data


import urllib.request
import sys

TARGET = 'http://crypto-class.appspot.com/po?er='
code = "f20bdba6ff29eed7b046d1df9fb7000058b1ffb4210a580f748b4ac714c001bd4a61044426fb515dad3f21f18aa577c0bdf302936266926ff37dbf7035d5eeb4"
code = hextobytes(code)
code = bytearray(code)
#--------------------------------------------------------------
# padding oracle
#--------------------------------------------------------------
class PaddingOracle(object):
    def query(self, q):
        target = TARGET + urllib.request.quote(q)    # Create query URL
        req = urllib.request.Request(target)         # Send HTTP request to server
        try:
            f = urllib.request.urlopen(req)          # Wait for response
        except urllib.request.HTTPError as e:          
            #print("We got: %d" % e.code)       # Print response code
            if e.code == 404:
                return True # good padding
            return False # bad padding


freq = {} 
for i in range(256): freq[i] = 0
with open("text.txt", "r") as f:
    data = f.read()
    for i in data:
        c = ord(i)
        if not c in range(256): continue
        freq[c] += 1
freq = sorted(freq.items(), key=lambda x:x[1], reverse=True)
chars = [code for (code, f) in freq]
chars = [9] + chars

po = PaddingOracle()
message = bytearray(len(code))
for i in range(len(code)):
    message[i] = 95

#chars = [9] + list(range(32, 33)) + list(range(96, 128)) + list(range(64,96)) + list(range(33,64))  + list(range(0,32))  + list(range(128, 256))

def oracle(c, ind):
    for i in chars:
        c[ind] = xor(c[ind], i)
        save = list(c)
        res = po.query(bytestohex(c))
        c[ind] = xor(c[ind], i)
        if res != False:
            return i
    return None

def guess_block(ind):
    ind = (ind + 1) * 16
    for i in range(16):
        ind_m = ind + 15 - i
        ind_c = ind - i - 1
        ct = code[:ind+16]

        for j in range(i + 1):
                ct[ind_c + j] = xor(ct[ind_c + j], (i + 1))
                if j == 0: continue
                ct[ind_c + j] = xor(ct[ind_c + j], message[ind_m + j])

        message[ind_m] = oracle(ct, ind_c)
        print(message)

print(bytestohex(message))
for ind_block in range(3):
    guess_block(ind_block)
print(bytestohex(message))
print(message)

exit(0)
po = PaddingOracle()
for i in range(256):
    code[-1] = i
    res = po.query(bytestohex(code))
    if res != False:
        print(res, i)
